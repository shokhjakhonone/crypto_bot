import os
import time
import telebot
import requests
import pandas as pd
from sklearn.model_selection import train_test_split
from xgboost import XGBClassifier
from sklearn.metrics import accuracy_score
import numpy as np
import matplotlib.pyplot as plt
import io
import matplotlib

from langchain_openai import ChatOpenAI
from langchain.prompts import (
    ChatPromptTemplate,
    MessagesPlaceholder,
    SystemMessagePromptTemplate,
    HumanMessagePromptTemplate,
)
from langchain.chains import LLMChain
from langchain.memory import ConversationBufferMemory
from openai import APIConnectionError

# –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±—ç–∫–µ–Ω–¥ –¥–ª—è Matplotlib
matplotlib.use('Agg')

# –£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞
API_TOKEN = '7033028733:AAFTn3K4h9bAV0dEPSClYIMk_RPTlQaMUcg'
bot = telebot.TeleBot(API_TOKEN, parse_mode=None)

# –ü—Ä–æ–º–æ–∫–æ–¥—ã
PROMO_CODES = {"BEGZOD2024", "CRYPTO2024"}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö
def get_crypto_data():
    url = 'https://api.coingecko.com/api/v3/coins/markets'
    params = {
        'vs_currency': 'usd',
        'order': 'market_cap_desc',
        'per_page': 100,
        'page': 1,
        'sparkline': 'false'
    }
    response = requests.get(url, params=params)
    data = response.json()
    df = pd.DataFrame(data)
    return df

# –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
def train_model(df):
    df['price_change_percentage_24h'] = df['price_change_percentage_24h'].fillna(0)
    df['target'] = df['price_change_percentage_24h'].apply(lambda x: 1 if x > 0 else 0)

    features = ['current_price', 'market_cap', 'total_volume']
    X = df[features]
    y = df['target']

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = XGBClassifier(n_estimators=100, random_state=42, use_label_encoder=False, eval_metric='logloss')
    model.fit(X_train, y_train)

    y_pred = model.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    print(f'Model accuracy: {accuracy}')

    return model

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
def predict(model, df):
    features = ['current_price', 'market_cap', 'total_volume']
    X = df[features]
    predictions = model.predict(X)
    df['prediction'] = predictions
    return df

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
def create_buttons():
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = telebot.types.KeyboardButton('‚úÖ –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã')
    btn2 = telebot.types.KeyboardButton('üìä –ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫')
    btn3 = telebot.types.KeyboardButton('üîë –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥')
    btn4 = telebot.types.KeyboardButton('‚öôÔ∏è –æ —Ñ—É–Ω–∫—Ü–∏—è—Ö')
    btn5 = telebot.types.KeyboardButton('üí¨ –°–ø—Ä–æ—Å–∏—Ç—å —É –ò–ò')
    markup.add(btn1, btn2, btn3, btn4, btn5)
    return markup

# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
def plot_predictions(df):
    plt.figure(figsize=(14, 8))
    df = df.sort_values(by='market_cap', ascending=False).head(10)
    colors = ['green' if pred == 1 else 'red' for pred in df['prediction']]
    bars = plt.bar(df['name'], df['current_price'], color=colors, edgecolor='black')

    for bar, pred in zip(bars, df['prediction']):
        height = bar.get_height()
        plt.text(bar.get_x() + bar.get_width() / 2.0, height,
                 '–ö—É–ø–∏—Ç—å' if pred == 1 else '–ü—Ä–æ–¥–∞—Ç—å', ha='center', va='bottom', color='black')

    plt.xlabel('–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞', fontsize=14)
    plt.ylabel('–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ (USD)', fontsize=14)
    plt.title('–¢–æ–ø-10 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –ø–æ —Ä—ã–Ω–æ—á–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏', fontsize=16)
    plt.xticks(rotation=45)
    plt.tight_layout()

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ç–∫–∏ –∏ —É–ª—É—á—à–µ–Ω–∏–µ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞
    plt.grid(True, which='both', linestyle='--', linewidth=0.5)
    plt.minorticks_on()
    plt.gca().set_axisbelow(True)

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    plt.figtext(0.99, 0.01, '–ó–µ–ª–µ–Ω—ã–µ —Å—Ç–æ–ª–±–∏–∫–∏ –æ–∑–Ω–∞—á–∞—é—Ç —Å–∏–≥–Ω–∞–ª –Ω–∞ –ø–æ–∫—É–ø–∫—É, –∫—Ä–∞—Å–Ω—ã–µ - –Ω–∞ –ø—Ä–æ–¥–∞–∂—É.', horizontalalignment='right')

    buf = io.BytesIO()
    plt.savefig(buf, format='png', dpi=300)
    buf.seek(0)
    return buf

# –ö–ª–∞—Å—Å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ LLM
class LLMChatBot:
    def __init__(self):
        self.llm = ChatOpenAI(
            temperature=0.95,
            model="glm-4",
            openai_api_key="Your api",
            openai_api_base="https://open.bigmodel.cn/api/paas/v4/"
        )
        self.prompt = ChatPromptTemplate(
            messages=[
                SystemMessagePromptTemplate.from_template(
                    "You are a nice chatbot having a conversation with a human and you can answer in Russian language"
                ),
                MessagesPlaceholder(variable_name="chat_history"),
                HumanMessagePromptTemplate.from_template("{question}")
            ]
        )
        self.memory = ConversationBufferMemory(memory_key="chat_history", return_messages=True)
        self.conversation = LLMChain(
            llm=self.llm,
            prompt=self.prompt,
            verbose=True,
            memory=self.memory
        )

    def ask_question(self, question):
        try:
            response = self.conversation.invoke({"question": question})
            return response['text']
        except APIConnectionError as err:
            return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LLMChatBot
llm_chatbot = LLMChatBot()

@bot.message_handler(commands=['start'])
def send_welcome(message):
    markup = create_buttons()
    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç —Å –ø–æ–º–æ—â—å—é –ø—Ä–æ–º–æ–∫–æ–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º.", reply_markup=markup)
    user_states[message.chat.id] = {"activated": False}

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    user_state = user_states.get(message.chat.id, {"activated": False})

    if message.text == '‚úÖ –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã':
        if user_state["activated"]:
            bot.send_message(message.chat.id, "–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ ‚è≥...")
            df = get_crypto_data()
            model = train_model(df)
            predictions = predict(model, df)

            top_predictions = predictions[['name', 'current_price', 'prediction']].head(10)
            response = "–¢–æ–ø-10 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤:\n\n"
            for index, row in top_predictions.iterrows():
                trend = "–≤–≤–µ—Ä—Öüìà " if row['prediction'] == 1 else "–≤–Ω–∏–∑üìâ"
                response += f"{row['name']}: ${row['current_price']} - –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: {trend}\n"

            bot.send_message(message.chat.id, response)
        else:
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç —Å –ø–æ–º–æ—â—å—é –ø—Ä–æ–º–æ–∫–æ–¥–∞.")

    elif message.text == 'üìä –ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫':
        if user_state["activated"]:
            df = get_crypto_data()
            model = train_model(df)
            predictions = predict(model, df)
            buf = plot_predictions(predictions)
            bot.send_photo(message.chat.id, buf)
        else:
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç —Å –ø–æ–º–æ—â—å—é –ø—Ä–æ–º–æ–∫–æ–¥–∞.")

    elif message.text == 'üîë –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥':
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø—Ä–æ–º–æ–∫–æ–¥.")
        user_states[message.chat.id]['awaiting_promo'] = True

    elif message.text == '‚öôÔ∏è –æ —Ñ—É–Ω–∫—Ü–∏—è—Ö':
        bot.send_message(message.chat.id, "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞: –≠—Ç–æ—Ç Telegram-–±–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø—Ä–æ–≥–Ω–æ–∑—ã –ø–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–º–æ—â—å—é –≥—Ä–∞—Ñ–∏–∫–æ–≤. –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞ –≤–∫–ª—é—á–∞—é—Ç:\n\n"
                                          "1. –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤:\n"
                                          "- –ö–æ–º–∞–Ω–¥–∞: ‚úÖ –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã\n"
                                          "- –û–ø–∏—Å–∞–Ω–∏–µ: –ë–æ—Ç –ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–∫—É—â–∏—Ö —Ü–µ–Ω–∞—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç, –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ—Ç –∏—Ö –±—É–¥—É—â–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ç–æ–ø-10 –ø—Ä–æ–≥–Ω–æ–∑–æ–≤.\n\n"
                                          "2. –ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫:\n"
                                          "- –ö–æ–º–∞–Ω–¥–∞: üìä –ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫\n"
                                          "- –û–ø–∏—Å–∞–Ω–∏–µ: –ë–æ—Ç –≤–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö, –ø–æ–∫–∞–∑—ã–≤–∞—è —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã –∏ –ø—Ä–æ–≥–Ω–æ–∑—ã –≤ –≤–∏–¥–µ –≥—Ä–∞—Ñ–∏–∫–∞.\n\n"
                                          "3. –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥:\n"
                                          "- –ö–æ–º–∞–Ω–¥–∞: üîë –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥\n"
                                          "- –û–ø–∏—Å–∞–Ω–∏–µ: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –≤–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞.\n\n"
                                          "4. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ—É–Ω–∫—Ü–∏—è—Ö:\n"
                                          "- –ö–æ–º–∞–Ω–¥–∞: ‚öôÔ∏è –æ —Ñ—É–Ω–∫—Ü–∏—è—Ö\n"
                                          "- –û–ø–∏—Å–∞–Ω–∏–µ: –ë–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö –∏ –∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏.\n\n"
                                          "5. –°–ø—Ä–æ—Å–∏—Ç—å —É –ò–ò:\n"
                                          "- –ö–æ–º–∞–Ω–¥–∞: üí¨ –°–ø—Ä–æ—Å–∏—Ç—å —É –ò–ò\n"
                                          "- –û–ø–∏—Å–∞–Ω–∏–µ: –ë–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ò–ò-–º–æ–¥–µ–ª–∏.")

    elif message.text == 'üí¨ –°–ø—Ä–æ—Å–∏—Ç—å —É –ò–ò':
      if user_state["activated"]:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å.")
        user_states[message.chat.id]['awaiting_ai_question'] = True
      else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç —Å –ø–æ–º–æ—â—å—é –ø—Ä–æ–º–æ–∫–æ–¥–∞.")

    elif user_state.get('awaiting_promo', False):
        promo_code = message.text.strip().upper()
        if promo_code in PROMO_CODES:
            user_states[message.chat.id]['activated'] = True
            bot.send_message(message.chat.id, "–í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–Ω—è—Ç! –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")
        else:
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        user_states[message.chat.id]['awaiting_promo'] = False

    elif user_state.get('awaiting_ai_question', False):
        question = message.text.strip()
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –≤–∞—à –≤–æ–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è... ‚è≥")
        response = llm_chatbot.ask_question(question)
        bot.send_message(message.chat.id, response)
        user_states[message.chat.id]['awaiting_ai_question'] = False

    else:
        bot.send_message(message.chat.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")

while True:
    try:
        bot.polling(non_stop=True, interval=1, timeout=60)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        time.sleep(15)
